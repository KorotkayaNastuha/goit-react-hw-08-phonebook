{"version":3,"file":"static/js/865.21cf828f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/Contacts/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => \n     state.contacts.items;\n\nexport const getFilter = state => \n     state.filter.filter;\n\nexport const getIsLoading = state =>\n     state.contacts.isLoading;\n\nexport const getError = state =>\n     state.contacts.error;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from \"react\";\n// import PropTypes from 'prop-types';\n// import css from '../ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { nanoid } from \"nanoid\";\nimport { Box, Button, TextField } from '@mui/material';\n\nexport default function ContactForm() { \n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n\nconst handleChangeNumber = event => {\n        setNumber(event.currentTarget.value);\n    };\nconst handleChangeName = event => {\n        setName(event.currentTarget.value);\n    };\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    contacts.some(contact => contact.name === name)\n        ? alert(`${name} is already in contacts.`)\n        : dispatch(addContact({\n            name,\n            number,\n            id: nanoid(),\n        })\n        )\n    setName('');\n    setNumber('');\n    };\n   \n    return (\n        <Box sx={{ width: '320px', m: '20px  auto 0'}}>\n      <form autoComplete=\"off\" onSubmit={handleSubmit}>\n        <TextField\n            fullWidth\n            required\n            sx={{ mb: '1rem' }}\n            variant=\"outlined\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            id=\"name\"\n            label=\"Name\"\n            onChange={handleChangeName}\n            value={name}\n        />\n        <TextField\n            fullWidth\n            required\n            sx={{ mb: '1rem' }}\n            variant=\"outlined\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            label=\"Number\"\n            onChange={handleChangeNumber}\n            value={number}\n        />\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          size=\"large\"\n          sx={{ width: '100%' }}\n        >\n          Add contact\n        </Button>\n      </form>\n    </Box>\n    )\n    \n    // <form className={css.form} onSubmit={handleSubmit}>\n    //         <label className={css.formLabel}>\n    //             Name\n    //             <input\n    //                 type=\"text\"\n    //                 name=\"name\"\n    //                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //                 title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //                 required\n    //                 onChange={handleChangeName}\n    //                 value={name}\n    //                 className={css.formName}\n    //             />\n    //         </label>\n    //         <label className={css.formLabel}>\n    //             Number\n    //             <input\n    //                 type=\"tel\"\n    //                 name=\"number\"\n    //                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //                 title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //                 required\n    //                 onChange={handleChangeNumber}\n    //                 value={number}\n    //                 className={css.formNumber}\n    //             />\n    //         </label>\n    //         <button className={css.formButton} type=\"submit\">Add contact</button>\n    //     </form>\n    }\n\n\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n// import css from '../Contacts/Contacts.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { getFilter, getContacts } from \"../../redux/contacts/selectors\";\nimport { Box, Button, TextField } from \"@mui/material\";\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nconst Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\nconst handleDelete = id => dispatch(deleteContact(id));\n  return (\n   <Box sx={{ display: 'flex', alignItems: 'flex-end', m:'auto', width: '340px'}}>\n        <AccountCircle sx={{ color: 'action.active', mr: 1, my: 0.5 }} />\n      <TextField\n        label={`${name}:${number}`}\n        variant=\"standard\"\n      />\n       <Button\n          variant=\"contained\"\n          type=\"button\"\n          size=\"small\"\n      sx={{ width: '20%' }}\n      onClick={()=>handleDelete(id)}\n        >\n          Delete\n      </Button>\n      </Box>\n       \n   \n  )\n  // // <li className={css.item} ><span>{name}: {number}</span>\n    \n  //       {/* <button className={css.contactButton} type='button' onClick={()=>handleDelete(id)}>\n  //           Delete\n  //       </button> */}\n  //   // </li>\n    \n}\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    })\n  }\n}\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n \n\n  return  <ul>\n            {visibleContacts.map(contact => (\n              <Contact\n                name = {contact.name}\n                number = { contact.number}\n                id = {contact.id}\n                \n                key={contact.id}\n                ></Contact>  \n            ))}\n      \n          </ul>\n}\nContactList.propTypes = {\n  visibleContacts: PropTypes.array,\n  handleDelete: PropTypes.func,\n}","\nimport PropTypes from 'prop-types';\n// import css from '../Filter/Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { Box,  TextField } from '@mui/material';\nexport function Filter() {\n    \nconst dispatch = useDispatch();\nconst filter = useSelector(getFilter); \n    \nconst handleChangeFilter = (event) => {\n    dispatch(setFilter(event.currentTarget.value))\n    }\n    \n    return (\n        <Box sx={{ width: '320px', m: '20px  auto 0'}}>\n        <TextField\n            fullWidth\n            required\n            sx={{ mb: '1rem' }}\n            variant=\"outlined\"\n            type=\"text\"\n            name=\"filter\"\n            id=\"name\"\n            label=\"Find contacts by Name\"\n            onChange={handleChangeFilter}\n            value={filter}\n        />\n        \n    </Box>\n    )\n    \n    \n//     <label className={css.filterLabel}>Find contacts by Name\n//         <input\n//             type=\"text\"\n//             name=\"filter\"\n//             onChange={handleChangeFilter}\n//             className={css.filterName}\n//             value={filter}\n//         ></input></label>\n    \n};\n\nFilter.propTypes = {\n    onFilter:PropTypes.func,\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getIsLoading } from \"redux/contacts/selectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/Contacts/ContactList\";\nimport { Helmet } from 'react-helmet';\nimport { Filter } from \"components/Filter/Filter\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Phonebook</title>\n            </Helmet>\n            <ContactForm />\n            <div>{isLoading && 'Reguest in progress...'}</div>\n            <Filter />\n            <ContactList/>\n        </>\n    )\n\n\n}"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","Box","sx","width","m","autoComplete","onSubmit","event","preventDefault","some","contact","alert","addContact","TextField","fullWidth","required","mb","variant","type","pattern","title","label","onChange","currentTarget","value","Button","Contact","display","alignItems","AccountCircle","color","mr","my","onClick","deleteContact","handleDelete","ContactList","visibleContacts","toLowerCase","includes","getVisibleContacts","map","Filter","setFilter","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}