{"version":3,"file":"static/js/263.b1ba541c.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => \n     state.contacts.items;\n\nexport const getFilter = state => \n     state.filter.filter;\n\nexport const getIsLoading = state =>\n     state.contacts.isLoading;\n\nexport const getError = state =>\n     state.contacts.error;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formName\":\"ContactForm_formName__9bHzl\",\"formNumber\":\"ContactForm_formNumber__UMrmC\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from \"react\";\n// import PropTypes from 'prop-types';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { nanoid } from \"nanoid\";\n\n\nexport default function ContactForm() { \n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n\nconst handleChangeNumber = event => {\n        setNumber(event.currentTarget.value);\n    };\nconst handleChangeName = event => {\n        setName(event.currentTarget.value);\n    };\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    contacts.some(contact => contact.name === name)\n        ? alert(`${name} is already in contacts.`)\n        : dispatch(addContact({\n            name,\n            number,\n            id: nanoid(),\n        })\n        )\n    setName('');\n    setNumber('');\n    };\n   \n        return <form className={css.form} onSubmit={handleSubmit}>\n            <label className={css.formLabel}>\n                Name\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    onChange={handleChangeName}\n                    value={name}\n                    className={css.formName}\n                />\n            </label>\n            <label className={css.formLabel}>\n                Number\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    onChange={handleChangeNumber}\n                    value={number}\n                    className={css.formNumber}\n                />\n            </label>\n            <button className={css.formButton} type=\"submit\">Add contact</button>\n        </form>\n    }\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactButton\":\"Contacts_contactButton__HB-0w\",\"item\":\"Contacts_item__WTDnh\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport css from '../Contacts/Contacts.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { getFilter, getContacts } from \"../../redux/contacts/selectors\";\n\n\nconst Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\nconst handleDelete = id => dispatch(deleteContact(id));\n  return <li className={css.item} ><span>{name}: {number}</span>\n        <button className={css.contactButton} type='button' onClick={()=>handleDelete(id)}>\n            Delete\n        </button>\n    </li>\n    \n}\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    })\n  }\n}\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n \n\n  return  <ul>\n            {visibleContacts.map(contact => (\n              <Contact\n                name = {contact.name}\n                number = { contact.number}\n                id = {contact.id}\n                \n                key={contact.id}\n                ></Contact>  \n            ))}\n      \n          </ul>\n}\nContactList.propTypes = {\n  visibleContacts: PropTypes.array,\n  handleDelete: PropTypes.func,\n}","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterName\":\"Filter_filterName__Y2kKA\"};","\nimport PropTypes from 'prop-types';\nimport css from '../Filter/Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport function Filter() {\n    \nconst dispatch = useDispatch();\nconst filter = useSelector(getFilter); \n    \nconst handleChangeFilter = (event) => {\n    dispatch(setFilter(event.currentTarget.value))\n    }\n    \n    return <label className={css.filterLabel}>Find contacts by Name\n        <input\n            type=\"text\"\n            name=\"filter\"\n            onChange={handleChangeFilter}\n            className={css.filterName}\n            value={filter}\n        ></input></label>\n    \n};\n\nFilter.propTypes = {\n    onFilter:PropTypes.func,\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getIsLoading } from \"redux/contacts/selectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/Contacts/ContactList\";\nimport { Helmet } from 'react-helmet';\nimport { Filter } from \"components/Filter/Filter\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Phonebook</title>\n            </Helmet>\n            <ContactForm />\n            <div>{isLoading && 'Reguest in progress...'}</div>\n            <Filter />\n            <ContactList/>\n        </>\n    )\n\n\n}"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","className","css","onSubmit","event","preventDefault","some","contact","alert","addContact","type","pattern","title","required","onChange","currentTarget","value","Contact","onClick","deleteContact","handleDelete","ContactList","visibleContacts","toLowerCase","includes","getVisibleContacts","map","Filter","setFilter","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}